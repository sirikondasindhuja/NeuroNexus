{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":2286,"sourceType":"datasetVersion","datasetId":1275},{"sourceId":2879186,"sourceType":"datasetVersion","datasetId":826163}],"dockerImageVersionId":31012,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false},"colab":{"name":"notebook9993d3121c","provenance":[{"file_id":"https://storage.googleapis.com/kaggle-colab-exported-notebooks/sandeepraosirikonda1/notebook9993d3121c.db81fffa-8782-4b72-92b9-6ae73a596ef2.ipynb?X-Goog-Algorithm=GOOG4-RSA-SHA256&X-Goog-Credential=gcp-kaggle-com%40kaggle-161607.iam.gserviceaccount.com/20250503/auto/storage/goog4_request&X-Goog-Date=20250503T151826Z&X-Goog-Expires=259200&X-Goog-SignedHeaders=host&X-Goog-Signature=9b747cd4a2404332b2d2d7e643bdc920304b3de407f91d89fbc0e880bd1880cfe0d981d318830aa44c615f196c2c7bcf8b5374120f39113168ab94d4ed0164e2a0cc830e2f60b4797455c636a03653197ca5759bc9b50bcb8bee97509b9f904cd2ec6b0e6dcbb65034b2078355bbab10d321c2416c7790bbb86b284ad726440b0fef22425e554d32138e2d63effac1e18215caccfbab0bf583d4154be1ead05f2d720720b7defe21c9af4bfe90529406bfb72d50a328a796e313c5d9c0ff23105664c014020245111b38d1668395ce53fa57938beeb64558b48dbbee6571092fc8c70f55b43201c6c1dbba726518d685ca1f45a1641ac81686977623be50c1e8","timestamp":1746288191903}]}},"nbformat_minor":0,"nbformat":4,"cells":[{"cell_type":"code","source":["# Step 1: Import libraries\n","import pandas as pd\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import accuracy_score, confusion_matrix, classification_report\n","from xgboost import XGBClassifier\n","\n","# Step 2: Load dataset\n","df = pd.read_csv('/kaggle/input/titanic/train_and_test2.csv')\n","\n","# Step 3: Drop columns only if they exist (optional, precaution)\n","columns_to_drop = ['Name', 'Ticket', 'Cabin', 'PassengerId']\n","df = df.drop(columns=[col for col in columns_to_drop if col in df.columns], errors='ignore')\n","\n","# Step 4: Split into features and target\n","# IMPORTANT: Replace 'Survived' with actual target column name in your dataset\n","target_column = '2urvived'\n","X = df.drop(columns=[target_column])\n","y = df[target_column]\n","\n","# Step 5: Train/test split\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","# Step 6: Train XGBoost model\n","model = XGBClassifier(use_label_encoder=False, eval_metric='logloss')\n","model.fit(X_train, y_train)\n","\n","# Step 7: Predict and evaluate\n","y_pred = model.predict(X_test)\n","\n","# Step 8: Show metrics\n","acc = accuracy_score(y_test, y_pred)\n","cm = confusion_matrix(y_test, y_pred)\n","report = classification_report(y_test, y_pred)\n","\n","print(f'Accuracy: {acc:.4f}')\n","print('Confusion Matrix:')\n","print(cm)\n","print('Classification Report:')\n","print(report)"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-03T08:04:58.286123Z","iopub.execute_input":"2025-05-03T08:04:58.286455Z","iopub.status.idle":"2025-05-03T08:04:58.413211Z","shell.execute_reply.started":"2025-05-03T08:04:58.286431Z","shell.execute_reply":"2025-05-03T08:04:58.411733Z"},"colab":{"base_uri":"https://localhost:8080/"},"id":"xjWduQAHuj9P","executionInfo":{"status":"ok","timestamp":1746286033111,"user_tz":-330,"elapsed":107,"user":{"displayName":"","userId":""}},"outputId":"9c47fcbc-7511-4cbb-f475-8052c6f4906d"},"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy: 0.8473\n","Confusion Matrix:\n","[[169  20]\n"," [ 20  53]]\n","Classification Report:\n","              precision    recall  f1-score   support\n","\n","           0       0.89      0.89      0.89       189\n","           1       0.73      0.73      0.73        73\n","\n","    accuracy                           0.85       262\n","   macro avg       0.81      0.81      0.81       262\n","weighted avg       0.85      0.85      0.85       262\n","\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/xgboost/core.py:158: UserWarning: [15:27:12] WARNING: /workspace/src/learner.cc:740: \n","Parameters: { \"use_label_encoder\" } are not used.\n","\n","  warnings.warn(smsg, UserWarning)\n"]}],"execution_count":16},{"cell_type":"code","source":["# Features aur target define\n","X = df.drop('2urvived', axis=1)\n","y = df['2urvived']\n","\n","# Train test split\n","from sklearn.model_selection import train_test_split\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-03T08:05:07.020843Z","iopub.execute_input":"2025-05-03T08:05:07.021338Z","iopub.status.idle":"2025-05-03T08:05:07.031469Z","shell.execute_reply.started":"2025-05-03T08:05:07.021308Z","shell.execute_reply":"2025-05-03T08:05:07.030603Z"},"id":"jbWw7oPnuj9Q","executionInfo":{"status":"ok","timestamp":1746285970986,"user_tz":-330,"elapsed":5,"user":{"displayName":"","userId":""}}},"outputs":[],"execution_count":11},{"cell_type":"code","source":["# Features aur target set kar\n","X = df.drop('2urvived', axis=1)\n","y = df['2urvived']\n","\n","# NaN ko fill karo (mean se)\n","X = X.fillna(X.mean())\n","\n","# Train-test split\n","from sklearn.model_selection import train_test_split\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","# Model bana aur train kar\n","from sklearn.ensemble import RandomForestClassifier\n","model = RandomForestClassifier(random_state=42)\n","model.fit(X_train, y_train)\n","\n","# Predict aur accuracy check\n","from sklearn.metrics import accuracy_score\n","y_pred = model.predict(X_test)\n","accuracy = accuracy_score(y_test, y_pred)\n","\n","print(\"Model Accuracy:\", accuracy)"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-03T08:05:12.20336Z","iopub.execute_input":"2025-05-03T08:05:12.20382Z","iopub.status.idle":"2025-05-03T08:05:12.456055Z","shell.execute_reply.started":"2025-05-03T08:05:12.203794Z","shell.execute_reply":"2025-05-03T08:05:12.455112Z"},"colab":{"base_uri":"https://localhost:8080/"},"id":"KCtuCv5cuj9Q","executionInfo":{"status":"ok","timestamp":1746285974934,"user_tz":-330,"elapsed":821,"user":{"displayName":"","userId":""}},"outputId":"57458d42-9ff3-409d-af32-09f6b40e88ee"},"outputs":[{"output_type":"stream","name":"stdout","text":["Model Accuracy: 0.8625954198473282\n"]}],"execution_count":12},{"cell_type":"code","source":["\n","import pandas as pd\n","\n","\n","test_data = pd.read_csv('/kaggle/input/test-file/tested.csv')\n","\n","numeric_cols = test_data.select_dtypes(include='number').columns\n","non_numeric_cols = test_data.select_dtypes(exclude='number').columns\n","\n","print(\"Numeric columns:\", numeric_cols.tolist())\n","print(\"Non-numeric columns:\", non_numeric_cols.tolist())\n","\n","numeric_mean = test_data[numeric_cols].mean()\n","print(\"\\nMean of numeric columns:\\n\", numeric_mean)\n","\n","test_data[numeric_cols] = test_data[numeric_cols].fillna(test_data[numeric_cols].mean())\n","\n","for col in non_numeric_cols:\n","    test_data[col] = test_data[col].fillna(test_data[col].mode()[0])\n","\n","print(\"\\nCleaned dataset head:\\n\", test_data.head())"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-03T08:15:15.650412Z","iopub.execute_input":"2025-05-03T08:15:15.650734Z","iopub.status.idle":"2025-05-03T08:15:15.677168Z","shell.execute_reply.started":"2025-05-03T08:15:15.650711Z","shell.execute_reply":"2025-05-03T08:15:15.675982Z"},"colab":{"base_uri":"https://localhost:8080/"},"id":"bHs2jyXLuj9R","executionInfo":{"status":"ok","timestamp":1746285978076,"user_tz":-330,"elapsed":58,"user":{"displayName":"","userId":""}},"outputId":"63c2a8b3-f365-4667-a2ff-122ec624d9ad"},"outputs":[{"output_type":"stream","name":"stdout","text":["Numeric columns: ['PassengerId', 'Survived', 'Pclass', 'Age', 'SibSp', 'Parch', 'Fare']\n","Non-numeric columns: ['Name', 'Sex', 'Ticket', 'Cabin', 'Embarked']\n","\n","Mean of numeric columns:\n"," PassengerId    1100.500000\n","Survived          0.363636\n","Pclass            2.265550\n","Age              30.272590\n","SibSp             0.447368\n","Parch             0.392344\n","Fare             35.627188\n","dtype: float64\n","\n","Cleaned dataset head:\n","    PassengerId  Survived  Pclass  \\\n","0          892         0       3   \n","1          893         1       3   \n","2          894         0       2   \n","3          895         0       3   \n","4          896         1       3   \n","\n","                                           Name     Sex   Age  SibSp  Parch  \\\n","0                              Kelly, Mr. James    male  34.5      0      0   \n","1              Wilkes, Mrs. James (Ellen Needs)  female  47.0      1      0   \n","2                     Myles, Mr. Thomas Francis    male  62.0      0      0   \n","3                              Wirz, Mr. Albert    male  27.0      0      0   \n","4  Hirvonen, Mrs. Alexander (Helga E Lindqvist)  female  22.0      1      1   \n","\n","    Ticket     Fare            Cabin Embarked  \n","0   330911   7.8292  B57 B59 B63 B66        Q  \n","1   363272   7.0000  B57 B59 B63 B66        S  \n","2   240276   9.6875  B57 B59 B63 B66        Q  \n","3   315154   8.6625  B57 B59 B63 B66        S  \n","4  3101298  12.2875  B57 B59 B63 B66        S  \n"]}],"execution_count":13},{"cell_type":"code","source":["# Step 1: Import necessary libraries\n","import pandas as pd\n","\n","# Step 2: Load the dataset\n","# Make sure the file path is correct â€” use \"/kaggle/input/test-file/tested.csv\"\n","file_path = \"/kaggle/input/test-file/tested.csv\"\n","test_data = pd.read_csv(file_path)\n","\n","# Step 3: Display the first few rows to confirm the data is loaded correctly\n","test_data.head()\n","\n","# Step 4: Identify Numeric columns\n","numeric_columns = test_data.select_dtypes(include='number').columns\n","print(\"Numeric columns:\")\n","print(numeric_columns)\n","\n","# Step 5: Identify Non-numeric columns\n","non_numeric_columns = test_data.select_dtypes(exclude='number').columns\n","print(\"\\nNon-numeric columns:\")\n","print(non_numeric_columns)"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-03T08:44:39.352296Z","iopub.execute_input":"2025-05-03T08:44:39.352652Z","iopub.status.idle":"2025-05-03T08:44:39.375587Z","shell.execute_reply.started":"2025-05-03T08:44:39.35262Z","shell.execute_reply":"2025-05-03T08:44:39.374268Z"},"colab":{"base_uri":"https://localhost:8080/"},"id":"puJKq8Q7uj9R","executionInfo":{"status":"ok","timestamp":1746285984528,"user_tz":-330,"elapsed":5,"user":{"displayName":"","userId":""}},"outputId":"d95caa5f-94d7-4c02-8b5c-2e03131f8df1"},"outputs":[{"output_type":"stream","name":"stdout","text":["Numeric columns:\n","Index(['PassengerId', 'Survived', 'Pclass', 'Age', 'SibSp', 'Parch', 'Fare'], dtype='object')\n","\n","Non-numeric columns:\n","Index(['Name', 'Sex', 'Ticket', 'Cabin', 'Embarked'], dtype='object')\n"]}],"execution_count":15},{"cell_type":"code","source":["import joblib\n","\n","# ... (your existing code)\n","X = df.drop('2urvived', axis=1)\n","y = df['2urvived']\n","\n","X = X.fillna(X.mean())\n","\n","from sklearn.model_selection import train_test_split\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","from sklearn.ensemble import RandomForestClassifier\n","model = RandomForestClassifier(random_state=42)\n","model.fit(X_train, y_train)\n","\n","from sklearn.metrics import accuracy_score\n","y_pred = model.predict(X_test)\n","accuracy = accuracy_score(y_test, y_pred)\n","\n","print(\"Model Accuracy:\", accuracy)\n","\n","# Save the model\n","joblib.dump(model, 'random_forest_model.pkl')\n","print(\"Model saved as 'random_forest_model.pkl'\")\n"],"metadata":{"trusted":true,"colab":{"base_uri":"https://localhost:8080/"},"id":"bvfzSUniuj9R","executionInfo":{"status":"ok","timestamp":1746286863620,"user_tz":-330,"elapsed":789,"user":{"displayName":"","userId":""}},"outputId":"f7e7ac12-7713-48e7-e57c-3c05972cc54a"},"outputs":[{"output_type":"stream","name":"stdout","text":["Model Accuracy: 0.8625954198473282\n","Model saved as 'random_forest_model.pkl'\n"]}],"execution_count":17},{"cell_type":"code","source":[],"metadata":{"id":"nuXdsRNszuA2"},"execution_count":null,"outputs":[]}]}